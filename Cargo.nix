# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "multiversx-sc-codec/default"
    "multiversx-sc-codec-derive/default"
    "multiversx-sc/default"
    "multiversx-sc-derive/default"
    "multiversx-sc-meta/default"
    "multiversx-sc-scenario/default"
    "multiversx-chain-scenario-format/default"
    "multiversx-chain-vm/default"
    "multiversx-sdk/default"
    "multiversx-sc-snippets/default"
    "multiversx-sc-wasm-adapter/default"
    "mxpy-snippet-generator/default"
    "payload-macro-generator/default"
    "multiversx-sc-modules/default"
    "multiversx-price-aggregator-sc/default"
    "multiversx-price-aggregator-sc-meta/default"
    "multiversx-wegld-swap-sc/default"
    "multiversx-wegld-swap-sc-meta/default"
    "benchmark-common/default"
    "linked-list-repeat/default"
    "linked-list-repeat-meta/default"
    "map-repeat/default"
    "map-repeat-meta/default"
    "queue-repeat/default"
    "queue-repeat-meta/default"
    "set-repeat/default"
    "set-repeat-meta/default"
    "single-value-repeat/default"
    "single-value-repeat-meta/default"
    "vec-repeat/default"
    "vec-repeat-meta/default"
    "large-storage/default"
    "large-storage-meta/default"
    "str-repeat/default"
    "str-repeat-meta/default"
    "send-tx-repeat/default"
    "send-tx-repeat-meta/default"
    "adder/default"
    "adder-meta/default"
    "basic-interact/default"
    "esdt-transfer-with-fee/default"
    "esdt-transfer-with-fee-meta/default"
    "bonding-curve-contract/default"
    "bonding-curve-contract-meta/default"
    "crowdfunding-esdt/default"
    "crowdfunding-esdt-meta/default"
    "crypto-bubbles/default"
    "crypto-bubbles-meta/default"
    "crypto-zombies/default"
    "crypto-zombies-meta/default"
    "check-pause/default"
    "check-pause-meta/default"
    "kitty-ownership/default"
    "kitty/default"
    "random/default"
    "kitty-genetic-alg/default"
    "kitty-ownership-meta/default"
    "kitty-genetic-alg-meta/default"
    "kitty-auction/default"
    "kitty-auction-meta/default"
    "digital-cash/default"
    "digital-cash-meta/default"
    "empty/default"
    "empty-meta/default"
    "factorial/default"
    "factorial-meta/default"
    "fractional-nfts/default"
    "fractional-nfts-meta/default"
    "lottery-esdt/default"
    "lottery-esdt-meta/default"
    "multisig/default"
    "multisig-meta/default"
    "multisig-interact/default"
    "nft-minter/default"
    "nft-minter-meta/default"
    "nft-subscription/default"
    "nft-subscription-meta/default"
    "nft-storage-prepay/default"
    "nft-storage-prepay-meta/default"
    "order-book-factory/default"
    "factory-meta/default"
    "order-book-pair/default"
    "pair-meta/default"
    "proxy-pause/default"
    "proxy-pause-meta/default"
    "ping-pong-egld/default"
    "ping-pong-egld-meta/default"
    "rewards-distribution/default"
    "rewards-distribution-meta/default"
    "seed-nft-minter/default"
    "seed-nft-minter-meta/default"
    "token-release/default"
    "token-release-meta/default"
    "abi-tester/default"
    "abi-tester-meta/default"
    "alloc-features/default"
    "esdt-system-sc-mock/default"
    "alloc-features-meta/default"
    "basic-features/default"
    "basic-features-meta/default"
    "basic-features-interact/default"
    "big-float-features/default"
    "big-float-features-meta/default"
    "composability-tests/default"
    "builtin-func-features/default"
    "forwarder/default"
    "forwarder-legacy/default"
    "vault/default"
    "forwarder-queue/default"
    "forwarder-raw/default"
    "promises-features/default"
    "proxy-test-first/default"
    "proxy-test-second/default"
    "recursive-caller/default"
    "interact/default"
    "builtin-func-features-meta/default"
    "esdt-contract-pair/default"
    "first-contract/default"
    "second-contract/default"
    "first-contract-meta/default"
    "second-contract-meta/default"
    "parent/default"
    "parent-meta/default"
    "child/default"
    "child-meta/default"
    "forwarder-meta/default"
    "forwarder-legacy-meta/default"
    "forwarder-queue-meta/default"
    "forwarder-raw-meta/default"
    "local-esdt-and-nft/default"
    "local-esdt-and-nft-meta/default"
    "promises-features-meta/default"
    "proxy-test-first-meta/default"
    "proxy-test-second-meta/default"
    "recursive-caller-meta/default"
    "transfer-role-features/default"
    "transfer-role-features-meta/default"
    "vault-meta/default"
    "crowdfunding-erc20/default"
    "erc20/default"
    "crowdfunding-erc20-meta/default"
    "erc20-meta/default"
    "erc721/default"
    "erc721-meta/default"
    "erc1155/default"
    "erc1155-user-mock/default"
    "erc1155-meta/default"
    "erc1155-marketplace/default"
    "erc1155-marketplace-meta/default"
    "erc1155-user-mock-meta/default"
    "lottery-erc20/default"
    "lottery-erc20-meta/default"
    "esdt-system-sc-mock-meta/default"
    "exchange-features/default"
    "exchange-features-meta/default"
    "formatted-message-features/default"
    "formatted-message-features-meta/default"
    "managed-map-features/default"
    "managed-map-features-meta/default"
    "multi-contract-features/default"
    "multi-contract-features-meta/default"
    "panic-message-features/default"
    "panic-message-features-meta/default"
    "payable-features/default"
    "payable-features-meta/default"
    "rust-snippets-generator-test/default"
    "rust-snippets-generator-test-meta/default"
    "rust-testing-framework-tester/default"
    "rust-testing-framework-tester-meta/default"
    "scenario-tester/default"
    "scenario-tester-meta/default"
    "use-module/default"
    "use-module-meta/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "f0397dd22f0f15c97eda8d91d7300ab157656e2802f382d9bab8ee848b16a3bc";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    multiversx-sc-codec = rustPackages.unknown.multiversx-sc-codec."0.19.0";
    multiversx-sc-codec-derive = rustPackages.unknown.multiversx-sc-codec-derive."0.19.0";
    multiversx-sc = rustPackages.unknown.multiversx-sc."0.50.3";
    multiversx-sc-derive = rustPackages.unknown.multiversx-sc-derive."0.50.3";
    multiversx-sc-meta = rustPackages.unknown.multiversx-sc-meta."0.50.3";
    multiversx-sc-scenario = rustPackages.unknown.multiversx-sc-scenario."0.50.3";
    multiversx-chain-scenario-format = rustPackages.unknown.multiversx-chain-scenario-format."0.22.2";
    multiversx-chain-vm = rustPackages.unknown.multiversx-chain-vm."0.8.4";
    multiversx-sdk = rustPackages.unknown.multiversx-sdk."0.4.1";
    multiversx-sc-snippets = rustPackages.unknown.multiversx-sc-snippets."0.50.3";
    multiversx-sc-wasm-adapter = rustPackages.unknown.multiversx-sc-wasm-adapter."0.50.3";
    mxpy-snippet-generator = rustPackages.unknown.mxpy-snippet-generator."0.0.0";
    payload-macro-generator = rustPackages.unknown.payload-macro-generator."0.1.0";
    multiversx-sc-modules = rustPackages.unknown.multiversx-sc-modules."0.50.3";
    multiversx-price-aggregator-sc = rustPackages.unknown.multiversx-price-aggregator-sc."0.50.3";
    multiversx-price-aggregator-sc-meta = rustPackages.unknown.multiversx-price-aggregator-sc-meta."0.0.0";
    multiversx-wegld-swap-sc = rustPackages.unknown.multiversx-wegld-swap-sc."0.50.3";
    multiversx-wegld-swap-sc-meta = rustPackages.unknown.multiversx-wegld-swap-sc-meta."0.0.0";
    benchmark-common = rustPackages.unknown.benchmark-common."0.0.0";
    linked-list-repeat = rustPackages.unknown.linked-list-repeat."0.0.0";
    linked-list-repeat-meta = rustPackages.unknown.linked-list-repeat-meta."0.0.0";
    map-repeat = rustPackages.unknown.map-repeat."0.0.0";
    map-repeat-meta = rustPackages.unknown.map-repeat-meta."0.0.0";
    queue-repeat = rustPackages.unknown.queue-repeat."0.0.0";
    queue-repeat-meta = rustPackages.unknown.queue-repeat-meta."0.0.0";
    set-repeat = rustPackages.unknown.set-repeat."0.0.0";
    set-repeat-meta = rustPackages.unknown.set-repeat-meta."0.0.0";
    single-value-repeat = rustPackages.unknown.single-value-repeat."0.0.0";
    single-value-repeat-meta = rustPackages.unknown.single-value-repeat-meta."0.0.0";
    vec-repeat = rustPackages.unknown.vec-repeat."0.0.0";
    vec-repeat-meta = rustPackages.unknown.vec-repeat-meta."0.0.0";
    large-storage = rustPackages.unknown.large-storage."0.0.0";
    large-storage-meta = rustPackages.unknown.large-storage-meta."0.0.0";
    str-repeat = rustPackages.unknown.str-repeat."0.0.0";
    str-repeat-meta = rustPackages.unknown.str-repeat-meta."0.0.0";
    send-tx-repeat = rustPackages.unknown.send-tx-repeat."0.0.0";
    send-tx-repeat-meta = rustPackages.unknown.send-tx-repeat-meta."0.0.0";
    adder = rustPackages.unknown.adder."0.0.0";
    adder-meta = rustPackages.unknown.adder-meta."0.0.0";
    basic-interact = rustPackages.unknown.basic-interact."0.0.0";
    esdt-transfer-with-fee = rustPackages.unknown.esdt-transfer-with-fee."0.0.0";
    esdt-transfer-with-fee-meta = rustPackages.unknown.esdt-transfer-with-fee-meta."0.0.0";
    bonding-curve-contract = rustPackages.unknown.bonding-curve-contract."0.0.0";
    bonding-curve-contract-meta = rustPackages.unknown.bonding-curve-contract-meta."0.0.0";
    crowdfunding-esdt = rustPackages.unknown.crowdfunding-esdt."0.0.0";
    crowdfunding-esdt-meta = rustPackages.unknown.crowdfunding-esdt-meta."0.0.0";
    crypto-bubbles = rustPackages.unknown.crypto-bubbles."0.0.0";
    crypto-bubbles-meta = rustPackages.unknown.crypto-bubbles-meta."0.0.0";
    crypto-zombies = rustPackages.unknown.crypto-zombies."0.0.0";
    crypto-zombies-meta = rustPackages.unknown.crypto-zombies-meta."0.0.0";
    check-pause = rustPackages.unknown.check-pause."0.0.0";
    check-pause-meta = rustPackages.unknown.check-pause-meta."0.0.0";
    kitty-ownership = rustPackages.unknown.kitty-ownership."0.0.0";
    kitty = rustPackages.unknown.kitty."0.0.0";
    random = rustPackages.unknown.random."0.0.0";
    kitty-genetic-alg = rustPackages.unknown.kitty-genetic-alg."0.0.0";
    kitty-ownership-meta = rustPackages.unknown.kitty-ownership-meta."0.0.0";
    kitty-genetic-alg-meta = rustPackages.unknown.kitty-genetic-alg-meta."0.0.0";
    kitty-auction = rustPackages.unknown.kitty-auction."0.0.0";
    kitty-auction-meta = rustPackages.unknown.kitty-auction-meta."0.0.0";
    digital-cash = rustPackages.unknown.digital-cash."0.0.0";
    digital-cash-meta = rustPackages.unknown.digital-cash-meta."0.0.0";
    empty = rustPackages.unknown.empty."0.0.0";
    empty-meta = rustPackages.unknown.empty-meta."0.0.0";
    factorial = rustPackages.unknown.factorial."0.0.0";
    factorial-meta = rustPackages.unknown.factorial-meta."0.0.0";
    fractional-nfts = rustPackages.unknown.fractional-nfts."0.0.0";
    fractional-nfts-meta = rustPackages.unknown.fractional-nfts-meta."0.0.0";
    lottery-esdt = rustPackages.unknown.lottery-esdt."0.0.0";
    lottery-esdt-meta = rustPackages.unknown.lottery-esdt-meta."0.0.0";
    multisig = rustPackages.unknown.multisig."1.0.0";
    multisig-meta = rustPackages.unknown.multisig-meta."0.0.0";
    multisig-interact = rustPackages.unknown.multisig-interact."0.0.0";
    nft-minter = rustPackages.unknown.nft-minter."0.0.0";
    nft-minter-meta = rustPackages.unknown.nft-minter-meta."0.0.0";
    nft-subscription = rustPackages.unknown.nft-subscription."0.0.0";
    nft-subscription-meta = rustPackages.unknown.nft-subscription-meta."0.0.0";
    nft-storage-prepay = rustPackages.unknown.nft-storage-prepay."0.0.0";
    nft-storage-prepay-meta = rustPackages.unknown.nft-storage-prepay-meta."0.0.0";
    order-book-factory = rustPackages.unknown.order-book-factory."0.0.0";
    factory-meta = rustPackages.unknown.factory-meta."0.0.0";
    order-book-pair = rustPackages.unknown.order-book-pair."0.0.0";
    pair-meta = rustPackages.unknown.pair-meta."0.0.0";
    proxy-pause = rustPackages.unknown.proxy-pause."0.0.0";
    proxy-pause-meta = rustPackages.unknown.proxy-pause-meta."0.0.0";
    ping-pong-egld = rustPackages.unknown.ping-pong-egld."0.0.2";
    ping-pong-egld-meta = rustPackages.unknown.ping-pong-egld-meta."0.0.0";
    rewards-distribution = rustPackages.unknown.rewards-distribution."0.0.0";
    rewards-distribution-meta = rustPackages.unknown.rewards-distribution-meta."0.0.0";
    seed-nft-minter = rustPackages.unknown.seed-nft-minter."0.0.0";
    seed-nft-minter-meta = rustPackages.unknown.seed-nft-minter-meta."0.0.0";
    token-release = rustPackages.unknown.token-release."0.0.1";
    token-release-meta = rustPackages.unknown.token-release-meta."0.0.0";
    abi-tester = rustPackages.unknown.abi-tester."0.0.0";
    abi-tester-meta = rustPackages.unknown.abi-tester-meta."0.0.0";
    alloc-features = rustPackages.unknown.alloc-features."0.0.0";
    esdt-system-sc-mock = rustPackages.unknown.esdt-system-sc-mock."0.0.0";
    alloc-features-meta = rustPackages.unknown.alloc-features-meta."0.0.0";
    basic-features = rustPackages.unknown.basic-features."0.0.0";
    basic-features-meta = rustPackages.unknown.basic-features-meta."0.0.0";
    basic-features-interact = rustPackages.unknown.basic-features-interact."0.0.0";
    big-float-features = rustPackages.unknown.big-float-features."0.0.0";
    big-float-features-meta = rustPackages.unknown.big-float-features-meta."0.0.0";
    composability-tests = rustPackages.unknown.composability-tests."0.0.0";
    builtin-func-features = rustPackages.unknown.builtin-func-features."0.0.0";
    forwarder = rustPackages.unknown.forwarder."0.0.0";
    forwarder-legacy = rustPackages.unknown.forwarder-legacy."0.0.0";
    vault = rustPackages.unknown.vault."0.0.0";
    forwarder-queue = rustPackages.unknown.forwarder-queue."0.0.0";
    forwarder-raw = rustPackages.unknown.forwarder-raw."0.0.0";
    promises-features = rustPackages.unknown.promises-features."0.0.0";
    proxy-test-first = rustPackages.unknown.proxy-test-first."0.0.0";
    proxy-test-second = rustPackages.unknown.proxy-test-second."0.0.0";
    recursive-caller = rustPackages.unknown.recursive-caller."0.0.0";
    interact = rustPackages.unknown.interact."0.0.0";
    builtin-func-features-meta = rustPackages.unknown.builtin-func-features-meta."0.0.0";
    esdt-contract-pair = rustPackages.unknown.esdt-contract-pair."0.0.0";
    first-contract = rustPackages.unknown.first-contract."0.0.0";
    second-contract = rustPackages.unknown.second-contract."0.0.0";
    first-contract-meta = rustPackages.unknown.first-contract-meta."0.0.0";
    second-contract-meta = rustPackages.unknown.second-contract-meta."0.0.0";
    parent = rustPackages.unknown.parent."0.0.0";
    parent-meta = rustPackages.unknown.parent-meta."0.0.0";
    child = rustPackages.unknown.child."0.0.0";
    child-meta = rustPackages.unknown.child-meta."0.0.0";
    forwarder-meta = rustPackages.unknown.forwarder-meta."0.0.0";
    forwarder-legacy-meta = rustPackages.unknown.forwarder-legacy-meta."0.0.0";
    forwarder-queue-meta = rustPackages.unknown.forwarder-queue-meta."0.0.0";
    forwarder-raw-meta = rustPackages.unknown.forwarder-raw-meta."0.0.0";
    local-esdt-and-nft = rustPackages.unknown.local-esdt-and-nft."0.0.0";
    local-esdt-and-nft-meta = rustPackages.unknown.local-esdt-and-nft-meta."0.0.0";
    promises-features-meta = rustPackages.unknown.promises-features-meta."0.0.0";
    proxy-test-first-meta = rustPackages.unknown.proxy-test-first-meta."0.0.0";
    proxy-test-second-meta = rustPackages.unknown.proxy-test-second-meta."0.0.0";
    recursive-caller-meta = rustPackages.unknown.recursive-caller-meta."0.0.0";
    transfer-role-features = rustPackages.unknown.transfer-role-features."0.0.0";
    transfer-role-features-meta = rustPackages.unknown.transfer-role-features-meta."0.0.0";
    vault-meta = rustPackages.unknown.vault-meta."0.0.0";
    crowdfunding-erc20 = rustPackages.unknown.crowdfunding-erc20."0.0.0";
    erc20 = rustPackages.unknown.erc20."0.0.0";
    crowdfunding-erc20-meta = rustPackages.unknown.crowdfunding-erc20-meta."0.0.0";
    erc20-meta = rustPackages.unknown.erc20-meta."0.0.0";
    erc721 = rustPackages.unknown.erc721."0.0.0";
    erc721-meta = rustPackages.unknown.erc721-meta."0.0.0";
    erc1155 = rustPackages.unknown.erc1155."0.0.0";
    erc1155-user-mock = rustPackages.unknown.erc1155-user-mock."0.0.0";
    erc1155-meta = rustPackages.unknown.erc1155-meta."0.0.0";
    erc1155-marketplace = rustPackages.unknown.erc1155-marketplace."0.0.0";
    erc1155-marketplace-meta = rustPackages.unknown.erc1155-marketplace-meta."0.0.0";
    erc1155-user-mock-meta = rustPackages.unknown.erc1155-user-mock-meta."0.0.0";
    lottery-erc20 = rustPackages.unknown.lottery-erc20."0.0.0";
    lottery-erc20-meta = rustPackages.unknown.lottery-erc20-meta."0.0.0";
    esdt-system-sc-mock-meta = rustPackages.unknown.esdt-system-sc-mock-meta."0.0.0";
    exchange-features = rustPackages.unknown.exchange-features."0.0.0";
    exchange-features-meta = rustPackages.unknown.exchange-features-meta."0.0.0";
    formatted-message-features = rustPackages.unknown.formatted-message-features."0.0.0";
    formatted-message-features-meta = rustPackages.unknown.formatted-message-features-meta."0.0.0";
    managed-map-features = rustPackages.unknown.managed-map-features."0.0.0";
    managed-map-features-meta = rustPackages.unknown.managed-map-features-meta."0.0.0";
    multi-contract-features = rustPackages.unknown.multi-contract-features."0.0.0";
    multi-contract-features-meta = rustPackages.unknown.multi-contract-features-meta."0.0.0";
    panic-message-features = rustPackages.unknown.panic-message-features."0.0.0";
    panic-message-features-meta = rustPackages.unknown.panic-message-features-meta."0.0.0";
    payable-features = rustPackages.unknown.payable-features."0.0.0";
    payable-features-meta = rustPackages.unknown.payable-features-meta."0.0.0";
    rust-snippets-generator-test = rustPackages.unknown.rust-snippets-generator-test."0.0.0";
    rust-snippets-generator-test-meta = rustPackages.unknown.rust-snippets-generator-test-meta."0.0.0";
    rust-testing-framework-tester = rustPackages.unknown.rust-testing-framework-tester."0.0.0";
    rust-testing-framework-tester-meta = rustPackages.unknown.rust-testing-framework-tester-meta."0.0.0";
    scenario-tester = rustPackages.unknown.scenario-tester."0.0.0";
    scenario-tester-meta = rustPackages.unknown.scenario-tester-meta."0.0.0";
    use-module = rustPackages.unknown.use-module."0.0.0";
    use-module-meta = rustPackages.unknown.use-module-meta."0.0.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "Inflector";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "heavyweight" ]
      [ "lazy_static" ]
      [ "regex" ]
    ];
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.4" { inherit profileName; }).out;
    };
  });
  
  "unknown".abi-tester."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "abi-tester";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".abi-tester-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "abi-tester-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      abi_tester = (rustPackages."unknown".abi-tester."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".adder."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "adder";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".adder-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "adder-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      adder = (rustPackages."unknown".adder."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb"; };
    dependencies = {
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.8.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      zerocopy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.34" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf-literal" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
    };
  });
  
  "unknown".alloc-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "alloc-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      esdt_system_sc_mock = (rustPackages."unknown".esdt-system-sc-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".alloc-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "alloc-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      alloc_features = (rustPackages."unknown".alloc-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.14" = overridableMkRustCrate (profileName: rec {
    name = "anstream";
    version = "0.6.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b"; };
    features = builtins.concatLists [
      [ "auto" ]
      [ "default" ]
      [ "wincon" ]
    ];
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" { inherit profileName; }).out;
      anstyle_parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.4" { inherit profileName; }).out;
      anstyle_query = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.0.3" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "anstyle_wincon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.3" { inherit profileName; }).out;
      colorchoice = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.1" { inherit profileName; }).out;
      is_terminal_polyfill = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.0" { inherit profileName; }).out;
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "anstyle";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-parse";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "utf8" ]
    ];
    dependencies = {
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-query";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a64c907d4e79225ac72e2a354c9ce84d50ebb4586dee56c82b3ee73004f537f5"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.3" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-wincon";
    version = "3.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19"; };
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.86" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3d1d046238990b9cf5bcde22a3fb3584ee5cf65fb2765f454ed428c7a0063da"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arbitrary."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "arbitrary";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d5a26814d8dcb93b0e5a0ff3c6d80a8843bafb21b39e8e18a6f05471870e110"; };
    features = builtins.concatLists [
      [ "derive" ]
      [ "derive_arbitrary" ]
    ];
    dependencies = {
      derive_arbitrary = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_arbitrary."1.3.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "atomic-waker";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.71" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.71";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "addr2line" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "miniz_oxide" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.3" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "object" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.32.2" { inherit profileName; }).out;
      rustc_demangle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.98" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.22.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".basic-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "basic-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      esdt_system_sc_mock = (rustPackages."unknown".esdt-system-sc-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".basic-features-interact."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "basic-features-interact";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      basic_features = (rustPackages."unknown".basic-features."0.0.0" { inherit profileName; }).out;
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      multiversx_sc_snippets = (rustPackages."unknown".multiversx-sc-snippets."0.50.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.8.13" { inherit profileName; }).out;
    };
  });
  
  "unknown".basic-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "basic-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      basic_features = (rustPackages."unknown".basic-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".basic-interact."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "basic-interact";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      adder = (rustPackages."unknown".adder."0.0.0" { inherit profileName; }).out;
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      multiversx_sc_snippets = (rustPackages."unknown".multiversx-sc-snippets."0.50.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.8.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bech32."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "bech32";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d86b93f97252c47b41663388e6d155714a9d0c398b99f1005cbc5f978b29f445"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".benchmark-common."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "benchmark-common";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".big-float-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "big-float-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      esdt_system_sc_mock = (rustPackages."unknown".esdt-system-sc-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".big-float-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "big-float-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      big_float_features = (rustPackages."unknown".big-float-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bip39."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bip39";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93f2635620bf0b9d4576eb7bb9a38a55df78bd1205d26fa994b25911a69f212f"; };
    features = builtins.concatLists [
      [ "crate_rand" ]
      [ "default" ]
      [ "rand" ]
      [ "rand_core" ]
      [ "serde" ]
      [ "std" ]
      [ "unicode-normalization" ]
    ];
    dependencies = {
      bitcoin_hashes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitcoin_hashes."0.11.0" { inherit profileName; }).out;
      crate_rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitcoin_hashes."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "bitcoin_hashes";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90064b8dee6815a6470d60bad07bbbaee885c0e12d04177138fa3291a01b7bc4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "unknown".bonding-curve-contract."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bonding-curve-contract";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".bonding-curve-contract-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "bonding-curve-contract-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      bonding_curve_contract = (rustPackages."unknown".bonding-curve-contract."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bstr."1.9.1" = overridableMkRustCrate (profileName: rec {
    name = "bstr";
    version = "1.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05efc5cfd9110c8416e471df0e96702d58690178e206e61b7173706673c93706"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "unknown".builtin-func-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "builtin-func-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".builtin-func-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "builtin-func-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      builtin_func_features = (rustPackages."unknown".builtin-func-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"; };
    features = builtins.concatLists [
      [ "i128" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.98" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.98";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41c270e7540d725e65ac7f1b212ac8ce349719624d7bcff99f8e2e488e8cf03f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "unknown".check-pause."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "check-pause";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
    };
  });
  
  "unknown".check-pause-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "check-pause-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      check_pause = (rustPackages."unknown".check-pause."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".child."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "child";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".child-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "child-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      child = (rustPackages."unknown".child."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "4.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90bc066a67923782aa8515dbaea16946c5bcc5addbd668bb80af688e53e548a0"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "default" ]
      [ "derive" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      clap_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.2" { inherit profileName; }).out;
      clap_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.2" = overridableMkRustCrate (profileName: rec {
    name = "clap_builder";
    version = "4.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae129e2e766ae0ec03484e609954119f123cc1fe650337e155d03b022f24f7b4"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      anstream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.14" { inherit profileName; }).out;
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" { inherit profileName; }).out;
      clap_lex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.0" { inherit profileName; }).out;
      strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.4" = overridableMkRustCrate (profileName: rec {
    name = "clap_derive";
    version = "4.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "528131438037fd55894f62d6e9f068b8f45ac57ffa77517819645d10aed04f64"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "clap_lex";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "colorchoice";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colored."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "colored";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cbf2150cce219b664a8a70df7a1f933836724b503f8a413af9365b4dcc4d90b8"; };
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".common-path."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "common-path";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2382f75942f4b3be3690fe4f86365e9c853c1587d6ee58212cebf6e2a9ccd101"; };
  });
  
  "unknown".composability-tests."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "composability-tests";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      builtin_func_features = (rustPackages."unknown".builtin-func-features."0.0.0" { inherit profileName; }).out;
      forwarder = (rustPackages."unknown".forwarder."0.0.0" { inherit profileName; }).out;
      forwarder_legacy = (rustPackages."unknown".forwarder-legacy."0.0.0" { inherit profileName; }).out;
      forwarder_queue = (rustPackages."unknown".forwarder-queue."0.0.0" { inherit profileName; }).out;
      forwarder_raw = (rustPackages."unknown".forwarder-raw."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      promises_features = (rustPackages."unknown".promises-features."0.0.0" { inherit profileName; }).out;
      proxy_test_first = (rustPackages."unknown".proxy-test-first."0.0.0" { inherit profileName; }).out;
      proxy_test_second = (rustPackages."unknown".proxy-test-second."0.0.0" { inherit profileName; }).out;
      recursive_caller = (rustPackages."unknown".recursive-caller."0.0.0" { inherit profileName; }).out;
      vault = (rustPackages."unknown".vault."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".convert_case."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "convert_case";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec182b0ca2f35d8fc196cf3404988fd8b8c739a4d270ff118a398feb0cbec1ca"; };
    dependencies = {
      unicode_segmentation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.11.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".copy_dir."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "copy_dir";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "543d1dd138ef086e2ff05e3a48cf9da045da2033d16f8538fd76b86cd49b2ca3"; };
    dependencies = {
      walkdir = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "link" ]
    ];
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "link" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.12" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-linux-android" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.vendor.name == "apple" || hostPlatform.parsed.cpu.name == "loongarch64" && hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_epoch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".crowdfunding-erc20."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crowdfunding-erc20";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc20 = (rustPackages."unknown".erc20."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".crowdfunding-erc20-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crowdfunding-erc20-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      crowdfunding_erc20 = (rustPackages."unknown".crowdfunding-erc20."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".crowdfunding-esdt."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crowdfunding-esdt";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "unknown".crowdfunding-esdt-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crowdfunding-esdt-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      crowdfunding_esdt = (rustPackages."unknown".crowdfunding-esdt."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".crypto-bubbles."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-bubbles";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".crypto-bubbles-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-bubbles-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      crypto_bubbles = (rustPackages."unknown".crypto-bubbles."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "crypto-common";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".crypto-zombies."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-zombies";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".crypto-zombies-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-zombies-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      crypto_zombies = (rustPackages."unknown".crypto-zombies."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b9fdf9972b2bd6af2d913799d9ebc165ea4d2e65878e329d9c6b372c4491b61"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.5.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_arbitrary."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "derive_arbitrary";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.10.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "block-buffer" ]
      [ "core-api" ]
      [ "default" ]
      [ "mac" ]
      [ "std" ]
      [ "subtle" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" { inherit profileName; }).out;
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.5.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".digital-cash."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "digital-cash";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".digital-cash-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "digital-cash-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      digital_cash = (rustPackages."unknown".digital-cash."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "displaydoc";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "487585f4d0c6655fe74905e2504d8ad6908e4db67f744eb140876906c2f3175d"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519."1.5.3" = overridableMkRustCrate (profileName: rec {
    name = "ed25519";
    version = "1.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91cff35c70bba8a626e3185d8cd48cc11b5437e1a5bcd15b9b5fa3c64b6dfee7"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ed25519-dalek";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c762bae6dcaf24c4c84667b8579785430908723d5c889f469d76a41d59cc7a9d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "rand" ]
      [ "serde_crate" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; }).out;
      ed25519 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."1.5.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; }).out;
      serde_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.12.0" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dca9240753cf90908d7e4aac30f630662b02aebaa1b58a3cadabdb23385b58b"; };
    features = builtins.concatLists [
      [ "use_std" ]
    ];
  });
  
  "unknown".empty."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "empty";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
    };
  });
  
  "unknown".empty-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "empty-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      empty = (rustPackages."unknown".empty."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.34" = overridableMkRustCrate (profileName: rec {
    name = "encoding_rs";
    version = "0.8.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".endian-type."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "endian-type";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_filter."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "env_filter";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a009aa4810eb158359dda09d0c87378e4bbb89b5a801f016885a4707ba24f7ea"; };
    features = builtins.concatLists [
      [ "regex" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.11.3" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.11.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38b35839ba51819680ba087cd351788c9a3c476841207e0b8cee0b04722343b9"; };
    features = builtins.concatLists [
      [ "auto-color" ]
      [ "color" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
    ];
    dependencies = {
      anstream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.14" { inherit profileName; }).out;
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.7" { inherit profileName; }).out;
      env_filter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_filter."0.1.0" { inherit profileName; }).out;
      humantime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "equivalent";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"; };
  });
  
  "unknown".erc1155."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc1155";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      erc1155_user_mock = (rustPackages."unknown".erc1155-user-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc1155-marketplace."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc1155-marketplace";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc1155 = (rustPackages."unknown".erc1155."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc1155-marketplace-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc1155-marketplace-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc1155_marketplace = (rustPackages."unknown".erc1155-marketplace."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc1155-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc1155-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc1155 = (rustPackages."unknown".erc1155."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc1155-user-mock."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc1155-user-mock";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc1155-user-mock-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc1155-user-mock-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc1155_user_mock = (rustPackages."unknown".erc1155-user-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc20."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc20";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc20-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc20-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc20 = (rustPackages."unknown".erc20."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc721."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc721";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".erc721-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "erc721-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc721 = (rustPackages."unknown".erc721."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".esdt-contract-pair."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "esdt-contract-pair";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    devDependencies = {
      first_contract = (rustPackages."unknown".first-contract."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      second_contract = (rustPackages."unknown".second-contract."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".esdt-system-sc-mock."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "esdt-system-sc-mock";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".esdt-system-sc-mock-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "esdt-system-sc-mock-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      esdt_system_sc_mock = (rustPackages."unknown".esdt-system-sc-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".esdt-transfer-with-fee."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "esdt-transfer-with-fee";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".esdt-transfer-with-fee-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "esdt-transfer-with-fee-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      esdt_transfer_with_fee = (rustPackages."unknown".esdt-transfer-with-fee."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".exchange-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "exchange-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".exchange-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "exchange-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      exchange_features = (rustPackages."unknown".exchange-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".factorial."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "factorial";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".factorial-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "factorial-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      factorial = (rustPackages."unknown".factorial."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".factory-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "factory-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      order_book_factory = (rustPackages."unknown".order-book-factory."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".first-contract."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "first-contract";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".first-contract-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "first-contract-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      first_contract = (rustPackages."unknown".first-contract."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.30" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae"; };
    features = builtins.concatLists [
      [ "any_impl" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
    ];
    dependencies = {
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      miniz_oxide = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
    };
  });
  
  "unknown".formatted-message-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "formatted-message-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".formatted-message-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "formatted-message-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      formatted_message_features = (rustPackages."unknown".formatted-message-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-legacy."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-legacy";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      vault = (rustPackages."unknown".vault."0.0.0" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-legacy-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-legacy-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      forwarder_legacy = (rustPackages."unknown".forwarder-legacy."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      forwarder = (rustPackages."unknown".forwarder."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-queue."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-queue";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "forwarder-queue/multiversx-sc-wasm-adapter") "multiversx-sc-wasm-adapter")
    ];
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "forwarder-queue/multiversx-sc-wasm-adapter" then "multiversx_sc_wasm_adapter" else null } = (rustPackages."unknown".multiversx-sc-wasm-adapter."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-queue-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-queue-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      forwarder_queue = (rustPackages."unknown".forwarder-queue."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-raw."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-raw";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".forwarder-raw-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "forwarder-raw-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      forwarder_raw = (rustPackages."unknown".forwarder-raw."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".fractional-nfts."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fractional-nfts";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".fractional-nfts-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fractional-nfts-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      fractional_nfts = (rustPackages."unknown".fractional-nfts."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_executor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.30" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      [ "channel" ]
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      [ "io" ]
      [ "memchr" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
    ];
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.30" { inherit profileName; }).out;
      futures_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.30" { profileName = "__noProfile"; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.30" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      pin_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"; };
    features = builtins.concatLists [
      [ "more_lengths" ]
    ];
    dependencies = {
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"; };
    features = builtins.concatLists [
      [ "js" ]
      [ "js-sys" ]
      [ "std" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64") && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64") && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.1" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.28.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253"; };
    features = builtins.concatLists [
      [ "read" ]
      [ "read-core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".globset."0.4.14" = overridableMkRustCrate (profileName: rec {
    name = "globset";
    version = "0.4.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57da3b9b5b85bd66f31093f8c408b90a74431672542466497dcbdfdc02034be1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" { inherit profileName; }).out;
      bstr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."1.9.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.6" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".h2."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa82e28a107a8cc405f0839610bdc9b15f1e25ec7d696aa5cf173edbcb1486ab"; };
    dependencies = {
      atomic_waker = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.11" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.14.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "raw" ]
      [ "serde" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "hex-literal";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fe2267d4ed49bc07b63801559be28c718ea06c4738b7a03c94df7386d2cde46"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21b9ddb458710bc376481b842f5da65cdf31522de232c1ca8146abce2a358258"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "http-body";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1cac85db508abc24a2e48553ba12a996e87244a0395ce011e62b37158745d643"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "http-body-util";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0475f8b2ac86659c21b64320d5d653f9efe42acd2a4e560073ec61a155a34f1d"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.0" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httparse."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "httparse";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper."1.3.1" = overridableMkRustCrate (profileName: rec {
    name = "hyper";
    version = "1.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe575dd17d0862a9a33781c8c4696a55c320909004a67a00fb286ba8b1bc496d"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "default" ]
      [ "http1" ]
      [ "http2" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
      h2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.5" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.0" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.8.0" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      want = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-tls."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "hyper-tls";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70206fc6890eaca9fde8a0bf71caa2ddfc9fe045ac9e5c70df101a7dbde866e0"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      http_body_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.1" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.3.1" { inherit profileName; }).out;
      hyper_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.4" { inherit profileName; }).out;
      native_tls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      tokio_native_tls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-native-tls."0.3.1" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "hyper-util";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d8d52be92d09acc2e01dddb7fde3ad983fc6489c7db4837e605bc3fca4cb63e"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "client-legacy" ]
      [ "default" ]
      [ "http1" ]
      [ "http2" ]
      [ "tokio" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.0" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.3.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      tower = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      unicode_bidi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.15" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ignore."0.4.22" = overridableMkRustCrate (profileName: rec {
    name = "ignore";
    version = "0.4.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b46810df39e66e925525d6e38ce1e7f6e1d208f72dc39757880fcb66e2c58af1"; };
    dependencies = {
      crossbeam_deque = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.5" { inherit profileName; }).out;
      globset = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".globset."0.4.14" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.6" { inherit profileName; }).out;
      same_file = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; }).out;
      walkdir = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.5.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "2.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      equivalent = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "unknown".interact."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "interact";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_snippets = (rustPackages."unknown".multiversx-sc-snippets."0.50.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.8.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipnet."2.9.0" = overridableMkRustCrate (profileName: rec {
    name = "ipnet";
    version = "2.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f518f335dce6725a761382244631d86cf0ccb2863413590b31338feb467f9c3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.0" = overridableMkRustCrate (profileName: rec {
    name = "is_terminal_polyfill";
    version = "1.70.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.12.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d"; };
    dependencies = {
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "keccak";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "aarch64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.12" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      random = (rustPackages."unknown".random."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty-auction."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty-auction";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      kitty = (rustPackages."unknown".kitty."0.0.0" { inherit profileName; }).out;
      kitty_ownership = (rustPackages."unknown".kitty-ownership."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty-auction-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty-auction-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      kitty_auction = (rustPackages."unknown".kitty-auction."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty-genetic-alg."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty-genetic-alg";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      kitty = (rustPackages."unknown".kitty."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      random = (rustPackages."unknown".random."0.0.0" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty-genetic-alg-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty-genetic-alg-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      kitty_genetic_alg = (rustPackages."unknown".kitty-genetic-alg."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty-ownership."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty-ownership";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      kitty = (rustPackages."unknown".kitty."0.0.0" { inherit profileName; }).out;
      kitty_genetic_alg = (rustPackages."unknown".kitty-genetic-alg."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      random = (rustPackages."unknown".random."0.0.0" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".kitty-ownership-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "kitty-ownership-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      kitty_ownership = (rustPackages."unknown".kitty-ownership."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".large-storage."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "large-storage";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".large-storage-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "large-storage-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      large_storage = (rustPackages."unknown".large-storage."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.155";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
    ];
  });
  
  "unknown".linked-list-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "linked-list-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      benchmark_common = (rustPackages."unknown".benchmark-common."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".linked-list-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "linked-list-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      linked_list_repeat = (rustPackages."unknown".linked-list-repeat."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.14" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.4.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89"; };
    features = builtins.concatLists [
      [ "elf" ]
      [ "errno" ]
      [ "general" ]
      [ "ioctl" ]
      [ "no_std" ]
    ];
  });
  
  "unknown".local-esdt-and-nft."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "local-esdt-and-nft";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".local-esdt-and-nft-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "local-esdt-and-nft-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      local_esdt_and_nft = (rustPackages."unknown".local-esdt-and-nft."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17"; };
    features = builtins.concatLists [
      [ "atomic_usize" ]
      [ "default" ]
    ];
    dependencies = {
      scopeguard = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lockfree-object-pool."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "lockfree-object-pool";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9374ef4228402d4b7e403e5838cb880d9ee663314b0a900d5a6aabf0c213552e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "unknown".lottery-erc20."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "lottery-erc20";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      erc20 = (rustPackages."unknown".erc20."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".lottery-erc20-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "lottery-erc20-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      lottery_erc20 = (rustPackages."unknown".lottery-erc20."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".lottery-esdt."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "lottery-esdt";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".lottery-esdt-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "lottery-esdt-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      lottery_esdt = (rustPackages."unknown".lottery-esdt."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".managed-map-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "managed-map-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      esdt_system_sc_mock = (rustPackages."unknown".esdt-system-sc-mock."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".managed-map-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "managed-map-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      managed_map_features = (rustPackages."unknown".managed-map-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".map-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "map-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      benchmark_common = (rustPackages."unknown".benchmark-common."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".map-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "map-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      map_repeat = (rustPackages."unknown".map-repeat."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "mime";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87dfd01fe195c66b572b37921ad8803d010623c0aca821bea2302239d155cdae"; };
    features = builtins.concatLists [
      [ "with-alloc" ]
    ];
    dependencies = {
      adler = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.11" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c"; };
    features = builtins.concatLists [
      [ "net" ]
      [ "os-ext" ]
      [ "os-poll" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".multi-contract-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multi-contract-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "multi-contract-features/example_feature") "example_feature")
    ];
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multi-contract-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multi-contract-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multi_contract_features = (rustPackages."unknown".multi-contract-features."0.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multisig."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multisig";
    version = "1.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      adder = (rustPackages."unknown".adder."0.0.0" { inherit profileName; }).out;
      factorial = (rustPackages."unknown".factorial."0.0.0" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      multiversx_wegld_swap_sc = (rustPackages."unknown".multiversx-wegld-swap-sc."0.50.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "unknown".multisig-interact."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multisig-interact";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      multisig = (rustPackages."unknown".multisig."1.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      multiversx_sc_snippets = (rustPackages."unknown".multiversx-sc-snippets."0.50.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.8.13" { inherit profileName; }).out;
    };
  });
  
  "unknown".multisig-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multisig-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multisig = (rustPackages."unknown".multisig."1.0.0" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-chain-scenario-format."0.22.2" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-chain-scenario-format";
    version = "0.22.2";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      bech32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bech32."0.9.1" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.117" { inherit profileName; }).out;
      sha3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-chain-vm."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-chain-vm";
    version = "0.8.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
      colored = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.1.0" { inherit profileName; }).out;
      ed25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      hex_literal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.4.1" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" { inherit profileName; }).out;
      multiversx_chain_vm_executor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiversx-chain-vm-executor."0.2.0" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_seeder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_seeder."0.2.3" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sha3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multiversx-chain-vm-executor."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-chain-vm-executor";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b59072fa0624b55ae5ae3fa6bfa91515bbeb4ac440214bc4a509e2c8806d6e9f"; };
  });
  
  "unknown".multiversx-price-aggregator-sc."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-price-aggregator-sc";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-price-aggregator-sc-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-price-aggregator-sc-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_price_aggregator_sc = (rustPackages."unknown".multiversx-price-aggregator-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "multiversx-sc/esdt-token-payment-legacy-decode") "esdt-token-payment-legacy-decode")
      (lib.optional (rootFeatures' ? "multiversx-sc/managed-buffer-builder-cached" || rootFeatures' ? "str-repeat/managed-buffer-builder-cached") "managed-buffer-builder-cached")
      [ "num-bigint" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
      hex_literal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.4.1" { inherit profileName; }).out;
      multiversx_sc_codec = (rustPackages."unknown".multiversx-sc-codec."0.19.0" { inherit profileName; }).out;
      multiversx_sc_derive = (buildRustPackages."unknown".multiversx-sc-derive."0.50.3" { profileName = "__noProfile"; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      unwrap_infallible = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unwrap-infallible."0.1.5" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-codec."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-codec";
    version = "0.19.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "alloc" ]
      [ "derive" ]
      [ "multiversx-sc-codec-derive" ]
      [ "num-bigint" ]
    ];
    dependencies = {
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      multiversx_sc_codec_derive = (buildRustPackages."unknown".multiversx-sc-codec-derive."0.19.0" { profileName = "__noProfile"; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      unwrap_infallible = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unwrap-infallible."0.1.5" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_codec_derive = (buildRustPackages."unknown".multiversx-sc-codec-derive."0.19.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "unknown".multiversx-sc-codec-derive."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-codec-derive";
    version = "0.19.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-derive."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-derive";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      radix_trie = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".radix_trie."0.2.1" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-meta."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-meta";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      [ "common-path" ]
      [ "copy_dir" ]
      [ "default" ]
      [ "pathdiff" ]
      [ "reqwest" ]
      [ "ruplacer" ]
      [ "standalone" ]
      (lib.optional (rootFeatures' ? "multiversx-sc-meta/template-test-current") "template-test-current")
      (lib.optional (rootFeatures' ? "multiversx-sc-meta/template-test-released") "template-test-released")
      [ "zip" ]
    ];
    dependencies = {
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      colored = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.1.0" { inherit profileName; }).out;
      common_path = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".common-path."1.0.0" { inherit profileName; }).out;
      convert_case = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".convert_case."0.6.0" { inherit profileName; }).out;
      copy_dir = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".copy_dir."0.1.3" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      pathdiff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pathdiff."0.2.1" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.4" { inherit profileName; }).out;
      ruplacer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ruplacer."0.8.2" { inherit profileName; }).out;
      rustc_version = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { inherit profileName; }).out;
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.23" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.117" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.8.13" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.208.1" { inherit profileName; }).out;
      wasmprinter = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmprinter."0.208.1" { inherit profileName; }).out;
      zip = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zip."2.1.0" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-modules."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-modules";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "multiversx-sc-modules/alloc") "alloc")
    ];
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-scenario."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-scenario";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "multiversx-sc-scenario/run-go-tests") "run-go-tests")
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bech32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bech32."0.9.1" { inherit profileName; }).out;
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      colored = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.1.0" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      multiversx_chain_scenario_format = (rustPackages."unknown".multiversx-chain-scenario-format."0.22.2" { inherit profileName; }).out;
      multiversx_chain_vm = (rustPackages."unknown".multiversx-chain-vm."0.8.4" { inherit profileName; }).out;
      multiversx_chain_vm_executor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiversx-chain-vm-executor."0.2.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      multiversx_sdk = (rustPackages."unknown".multiversx-sdk."0.4.1" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      pathdiff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pathdiff."0.2.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.117" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      unwrap_infallible = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unwrap-infallible."0.1.5" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-snippets."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-snippets";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      env_logger = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.11.3" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.30" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      multiversx_sdk = (rustPackages."unknown".multiversx-sdk."0.4.1" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sc-wasm-adapter."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sc-wasm-adapter";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-sdk."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-sdk";
    version = "0.4.1";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.86" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bech32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bech32."0.9.1" { inherit profileName; }).out;
      bip39 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bip39."2.0.0" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" { inherit profileName; }).out;
      pbkdf2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.12.2" { inherit profileName; }).out;
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      reqwest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.117" { inherit profileName; }).out;
      serde_repr = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_repr."0.1.19" { profileName = "__noProfile"; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sha3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.7.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-wegld-swap-sc."0.50.3" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-wegld-swap-sc";
    version = "0.50.3";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".multiversx-wegld-swap-sc-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "multiversx-wegld-swap-sc-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      multiversx_wegld_swap_sc = (rustPackages."unknown".multiversx-wegld-swap-sc."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".mxpy-snippet-generator."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "mxpy-snippet-generator";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      bech32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bech32."0.9.1" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" = overridableMkRustCrate (profileName: rec {
    name = "native-tls";
    version = "0.2.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "openssl" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.64" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "openssl_probe" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios") then "openssl_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "schannel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.23" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "security_framework" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "security_framework_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.11.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "tempfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.10.1" { inherit profileName; }).out;
    };
  });
  
  "unknown".nft-minter."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nft-minter";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".nft-minter-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nft-minter-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      nft_minter = (rustPackages."unknown".nft-minter."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".nft-storage-prepay."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nft-storage-prepay";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".nft-storage-prepay-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nft-storage-prepay-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      nft_storage_prepay = (rustPackages."unknown".nft-storage-prepay."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".nft-subscription."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nft-subscription";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".nft-subscription-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nft-subscription-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      nft_subscription = (rustPackages."unknown".nft-subscription."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nibble_vec."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nibble_vec";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43"; };
    dependencies = {
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "num-bigint";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c165a9ab64cf766f73521c0dd2cfdff64f488b8f0b3e621face3462d3db536d7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f"; };
    features = builtins.concatLists [
      [ "i128" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.9" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.32.2" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.32.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "elf" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "unaligned" ]
      [ "xcoff" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl."0.10.64" = overridableMkRustCrate (profileName: rec {
    name = "openssl";
    version = "0.10.64";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95a0481286a310808298130d22dd1fef0fa571e05a8f44ec801801e84b216b1f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      foreign_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      openssl_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-macros."0.1.1" { profileName = "__noProfile"; }).out;
      ffi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "openssl-macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "openssl-probe";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-sys."0.9.102" = overridableMkRustCrate (profileName: rec {
    name = "openssl-sys";
    version = "0.9.102";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c597637d56fbc83893a35eb0dd04b2b8e7a50c91e64e9493e398b5df4fb45fa2"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.98" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" { profileName = "__noProfile"; }).out;
      vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" { profileName = "__noProfile"; }).out;
    };
  });
  
  "unknown".order-book-factory."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "order-book-factory";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".order-book-pair."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "order-book-pair";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".pair-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "pair-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      order_book_pair = (rustPackages."unknown".order-book-pair."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".panic-message-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "panic-message-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".panic-message-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "panic-message-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      panic_message_features = (rustPackages."unknown".panic-message-features."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".parent."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "parent";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".parent-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "parent-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      parent = (rustPackages."unknown".parent."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lock_api = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" { inherit profileName; }).out;
      parking_lot_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pathdiff."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "pathdiff";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd"; };
  });
  
  "unknown".payable-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "payable-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".payable-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "payable-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      payable_features = (rustPackages."unknown".payable-features."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".payload-macro-generator."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "payload-macro-generator";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.12.2" = overridableMkRustCrate (profileName: rec {
    name = "pbkdf2";
    version = "0.12.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2"; };
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pem."3.0.4" = overridableMkRustCrate (profileName: rec {
    name = "pem";
    version = "3.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e459365e590736a54c3fa561947c84837534b8e9af6fc5bf781307e82658fae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.5" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "1.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6bf43b791c5b9e34c3d182969b4abb522f9343702850a2e57f460d00d09b4b3"; };
    dependencies = {
      pin_project_internal = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.5" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "1.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f38a4412a78282e09a2cf38d195ea5420d15ba0602cb375210efbc877243965"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "unknown".ping-pong-egld."0.0.2" = overridableMkRustCrate (profileName: rec {
    name = "ping-pong-egld";
    version = "0.0.2";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".ping-pong-egld-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "ping-pong-egld-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      ping_pong_egld = (rustPackages."unknown".ping-pong-egld."0.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.82";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ad3d49ab951a01fbaafe34f2ec74122942fe18a3f9814c3268f1bb72042131b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "unknown".promises-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "promises-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".promises-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "promises-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      promises_features = (rustPackages."unknown".promises-features."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".proxy-pause."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proxy-pause";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      check_pause = (rustPackages."unknown".check-pause."0.0.0" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".proxy-pause-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proxy-pause-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      proxy_pause = (rustPackages."unknown".proxy-pause."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".proxy-test-first."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proxy-test-first";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      hex_literal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.4.1" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".proxy-test-first-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proxy-test-first-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      proxy_test_first = (rustPackages."unknown".proxy-test-first."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".proxy-test-second."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proxy-test-second";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".proxy-test-second-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "proxy-test-second-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      proxy_test_second = (rustPackages."unknown".proxy-test-second."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".queue-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "queue-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      benchmark_common = (rustPackages."unknown".benchmark-common."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".queue-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "queue-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      queue_repeat = (rustPackages."unknown".queue-repeat."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.36";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radix_trie."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "radix_trie";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd"; };
    dependencies = {
      endian_type = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".endian-type."0.1.2" { inherit profileName; }).out;
      nibble_vec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nibble_vec."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "getrandom_package" ]
      [ "libc" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom_package = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      rand_chacha = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"; };
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_seeder."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rand_seeder";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf2890aaef0aa82719a50e808de264f9484b74b442e1a3a0e5ee38243ac40bdb"; };
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "unknown".random."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "random";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".recursive-caller."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "recursive-caller";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      vault = (rustPackages."unknown".vault."0.0.0" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".recursive-caller-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "recursive-caller-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      recursive_caller = (rustPackages."unknown".recursive-caller."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.10.4" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf" ]
      [ "perf-backtrack" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-onepass" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.6" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "dfa-onepass" ]
      [ "hybrid" ]
      [ "meta" ]
      [ "nfa" ]
      [ "nfa-backtrack" ]
      [ "nfa-pikevm" ]
      [ "nfa-thompson" ]
      [ "perf" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-literal-multisubstring" ]
      [ "perf-literal-substring" ]
      [ "std" ]
      [ "syntax" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
      [ "unicode-word-boundary" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "reqwest";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "566cafdd92868e0939d3fb961bd0dc25fcfaaed179291093b3d43e6b3150ea10"; };
    features = builtins.concatLists [
      [ "__tls" ]
      [ "blocking" ]
      [ "charset" ]
      [ "default" ]
      [ "default-tls" ]
      [ "futures-channel" ]
      [ "h2" ]
      [ "http2" ]
      [ "json" ]
      [ "macos-system-configuration" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "encoding_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encoding_rs."0.8.34" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "futures_channel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.30" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "h2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.5" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.1.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.3.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_tls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-tls."0.6.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.4" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "ipnet" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.9.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "mime" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "native_tls_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "percent_encoding" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls_pemfile" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.1.2" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.117" { inherit profileName; }).out;
      serde_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" { inherit profileName; }).out;
      sync_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."0.1.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "system_configuration" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".system-configuration."0.5.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_native_tls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-native-tls."0.3.1" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.42" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.69" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winreg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".rewards-distribution."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rewards-distribution";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".rewards-distribution-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rewards-distribution-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      rewards_distribution = (rustPackages."unknown".rewards-distribution."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ruplacer."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "ruplacer";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58a26a1b15ff113d31d139357f7422708312978ed69cd5dd47e36d1b80b7eaf3"; };
    dependencies = {
      inflector = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.86" { inherit profileName; }).out;
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.4" { inherit profileName; }).out;
      colored = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colored."2.1.0" { inherit profileName; }).out;
      ignore = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ignore."0.4.22" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.4" { inherit profileName; }).out;
    };
  });
  
  "unknown".rust-snippets-generator-test."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-snippets-generator-test";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".rust-snippets-generator-test-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-snippets-generator-test-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      rust_snippets_generator_test = (rustPackages."unknown".rust-snippets-generator-test."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".rust-testing-framework-tester."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-testing-framework-tester";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      adder = (rustPackages."unknown".adder."0.0.0" { inherit profileName; }).out;
      basic_features = (rustPackages."unknown".basic-features."0.0.0" { inherit profileName; }).out;
      forwarder = (rustPackages."unknown".forwarder."0.0.0" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" { inherit profileName; }).out;
      vault = (rustPackages."unknown".vault."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".rust-testing-framework-tester-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "rust-testing-framework-tester-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      rust_testing_framework_tester = (rustPackages."unknown".rust-testing-framework-tester."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"; };
    dependencies = {
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.23" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.34" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.38.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fs" ]
      [ "libc-extra-traits" ]
      [ "std" ]
      [ "use-libc-auxv" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) || hostPlatform.isWindows then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.9" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.14" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.1.2" = overridableMkRustCrate (profileName: rec {
    name = "rustls-pemfile";
    version = "2.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29993a25686778eb88d4189742cd713c9bce943bc54251a33509dc63cbacf73d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" { inherit profileName; }).out;
      pki_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "rustls-pki-types";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "976295e77ce332211c0d24d92c0e83e50f5c5f046d11082cea19f3df13a3562d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.8" { inherit profileName; }).out;
    };
  });
  
  "unknown".scenario-tester."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scenario-tester";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".scenario-tester-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scenario-tester-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      scenario_tester = (rustPackages."unknown".scenario-tester."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.23" = overridableMkRustCrate (profileName: rec {
    name = "schannel";
    version = "0.1.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fbc91545643bcf3a0bbb6569265615222618bdf33ce4ffbbd13c4bbd4c093534"; };
    dependencies = {
      windows_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"; };
  });
  
  "unknown".second-contract."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "second-contract";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".second-contract-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "second-contract-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      second_contract = (rustPackages."unknown".second-contract."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.0" = overridableMkRustCrate (profileName: rec {
    name = "security-framework";
    version = "2.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c627723fd09706bacdb5cf41499e95098555af3c3c29d014dc3c458ef6be11c0"; };
    features = builtins.concatLists [
      [ "OSX_10_10" ]
      [ "OSX_10_11" ]
      [ "OSX_10_9" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
      core_foundation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      security_framework_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.11.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.11.0" = overridableMkRustCrate (profileName: rec {
    name = "security-framework-sys";
    version = "2.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "317936bbbd05227752583946b9e66d7ce3b489f84e11a94a510b4437fef407d7"; };
    features = builtins.concatLists [
      [ "OSX_10_10" ]
      [ "OSX_10_11" ]
      [ "OSX_10_9" ]
      [ "default" ]
    ];
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
  });
  
  "unknown".seed-nft-minter."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "seed-nft-minter";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".seed-nft-minter-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "seed-nft-minter-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      seed_nft_minter = (rustPackages."unknown".seed-nft-minter."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.23" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".send-tx-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "send-tx-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".send-tx-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "send-tx-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      send_tx_repeat = (rustPackages."unknown".send-tx-repeat."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.202";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "226b61a0d411b2ba5ff6d7f73a476ac4f8bb900373459cd00fab8512828ba395"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "derive" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.202" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.202" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.202";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6048858004bcff69094cd972ed40a32500f153bd3be9f716b2eed2e8217c4838"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.117" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.117";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "455182ea6142b14f93f4bc5320a2b31c1f266b66a4a5c858b013302a5d8cbfc3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "indexmap" ]
      [ "preserve_order" ]
      [ "std" ]
    ];
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_repr."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "serde_repr";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.6" = overridableMkRustCrate (profileName: rec {
    name = "serde_spanned";
    version = "0.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79e674e01f999af37c49f70a6ede167a8a60b2503e56c5599532a65baa5969a0"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "serde_urlencoded";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd"; };
    dependencies = {
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.11" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.18" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "unknown".set-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "set-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      benchmark_common = (rustPackages."unknown".benchmark-common."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".set-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "set-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      set_repeat = (rustPackages."unknown".set-repeat."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.12" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.10.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.12" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" = overridableMkRustCrate (profileName: rec {
    name = "sha3";
    version = "0.10.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      keccak = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" = overridableMkRustCrate (profileName: rec {
    name = "signature";
    version = "1.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74233d3b3b2f6d4b006dc19dee745e73e2a6bfb6f93607cd3b02bd5b00797d7c"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "simd-adler32";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "unknown".single-value-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "single-value-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      benchmark_common = (rustPackages."unknown".benchmark-common."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".single-value-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "single-value-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      single_value_repeat = (rustPackages."unknown".single-value-repeat."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.3.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.13.2" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "const_new" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.5.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce305eb0b4296696835b71df73eb912e0f1ffd2556a501fcede6e0c50349191c"; };
    features = builtins.concatLists [
      [ "all" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".str-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "str-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "str-repeat/managed-buffer-builder-cached") "managed-buffer-builder-cached")
    ];
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".str-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "str-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      str_repeat = (rustPackages."unknown".str-repeat."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".subtle."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "subtle";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.61";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c993ed8ccba56ae856363b1845da7266a7cb78e1d146c8a32d54b45a8b831fc9"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "sync_wrapper";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".system-configuration."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "system-configuration";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      core_foundation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" { inherit profileName; }).out;
      system_configuration_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".system-configuration-sys."0.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".system-configuration-sys."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "system-configuration-sys";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9"; };
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.6" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.10.1" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      fastrand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.1.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.34" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.61" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.61";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709"; };
    dependencies = {
      thiserror_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.61" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.61" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.61";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "tinyvec_macros" ]
    ];
    dependencies = {
      tinyvec_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"; };
  });
  
  "unknown".token-release."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "token-release";
    version = "0.0.1";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".token-release-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "token-release-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      token_release = (rustPackages."unknown".token-release."0.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.37.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1adbebffeca75fcfd058afa480fb6c0b81e165a0323f9c9d39c9697e37c46787"; };
    features = builtins.concatLists [
      [ "bytes" ]
      [ "default" ]
      [ "fs" ]
      [ "full" ]
      [ "io-std" ]
      [ "io-util" ]
      [ "libc" ]
      [ "macros" ]
      [ "mio" ]
      [ "net" ]
      [ "num_cpus" ]
      [ "parking_lot" ]
      [ "process" ]
      [ "rt" ]
      [ "rt-multi-thread" ]
      [ "signal" ]
      [ "signal-hook-registry" ]
      [ "socket2" ]
      [ "sync" ]
      [ "time" ]
      [ "tokio-macros" ]
      [ "windows-sys" ]
    ];
    dependencies = {
      ${ if false then "backtrace" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.71" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.155" { inherit profileName; }).out;
      mio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.11" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "signal_hook_registry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.2" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.7" { inherit profileName; }).out;
      tokio_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-macros";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b8a1e28f2deaa14e508979454cb3a223b10b938b45af148bc0986de36f1923b"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-native-tls."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tokio-native-tls";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2"; };
    dependencies = {
      native_tls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".native-tls."0.2.11" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.11" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.7.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9cf6b47b3771c49ac75ad09a6162f53ad4b8088b76ac60e8ec1455b31a189fe1"; };
    features = builtins.concatLists [
      [ "codec" ]
      [ "default" ]
      [ "io" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.6.0" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.30" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.8.13" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.8.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4e43f8cc456c9704c851ae29c67e17ef65d2c30017c17a9765b89c382dc8bba"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "display" ]
      [ "indexmap" ]
      [ "parse" ]
      [ "preserve_order" ]
    ];
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_spanned = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.6" { inherit profileName; }).out;
      toml_datetime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.6" { inherit profileName; }).out;
      toml_edit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.22.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.6" = overridableMkRustCrate (profileName: rec {
    name = "toml_datetime";
    version = "0.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4badfd56924ae69bcc9039335b2e017639ce3f9b001c393c1b2d1ef846ce2cbf"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.22.13" = overridableMkRustCrate (profileName: rec {
    name = "toml_edit";
    version = "0.22.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c127785850e8c20836d49732ae6abfa47616e60bf9d9f57c43c250361a9db96c"; };
    features = builtins.concatLists [
      [ "display" ]
      [ "parse" ]
      [ "serde" ]
    ];
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
      serde_spanned = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.6" { inherit profileName; }).out;
      toml_datetime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.6" { inherit profileName; }).out;
      winnow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.6.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "tower";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c"; };
    features = builtins.concatLists [
      [ "__common" ]
      [ "futures-core" ]
      [ "futures-util" ]
      [ "make" ]
      [ "pin-project" ]
      [ "pin-project-lite" ]
      [ "tokio" ]
      [ "util" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.30" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.30" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.5" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.37.0" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.2" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "tower-layer";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "tower-service";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.14" { inherit profileName; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54"; };
    features = builtins.concatLists [
      [ "once_cell" ]
      [ "std" ]
    ];
    dependencies = {
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".transfer-role-features."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "transfer-role-features";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
      vault = (rustPackages."unknown".vault."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".transfer-role-features-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "transfer-role-features-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      transfer_role_features = (rustPackages."unknown".transfer-role-features."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "try-lock";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.15" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75"; };
    features = builtins.concatLists [
      [ "hardcoded-data" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.11.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unwrap-infallible."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "unwrap-infallible";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "151ac09978d3c2862c4e39b557f4eceee2cc72150bc4cb4f16abf061b6e381fb"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.5.0" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" { inherit profileName; }).out;
    };
  });
  
  "unknown".use-module."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "use-module";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
      multiversx_sc_modules = (rustPackages."unknown".multiversx-sc-modules."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".use-module-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "use-module-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      use_module = (rustPackages."unknown".use-module."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "utf8parse";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "unknown".vault."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "vault";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".vault-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "vault-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      vault = (rustPackages."unknown".vault."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "vcpkg";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"; };
  });
  
  "unknown".vec-repeat."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "vec-repeat";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      benchmark_common = (rustPackages."unknown".benchmark-common."0.0.0" { inherit profileName; }).out;
      multiversx_sc = (rustPackages."unknown".multiversx-sc."0.50.3" { inherit profileName; }).out;
    };
    devDependencies = {
      multiversx_sc_scenario = (rustPackages."unknown".multiversx-sc-scenario."0.50.3" { inherit profileName; }).out;
    };
  });
  
  "unknown".vec-repeat-meta."0.0.0" = overridableMkRustCrate (profileName: rec {
    name = "vec-repeat-meta";
    version = "0.0.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      multiversx_sc_meta = (rustPackages."unknown".multiversx-sc-meta."0.50.3" { inherit profileName; }).out;
      vec_repeat = (rustPackages."unknown".vec-repeat."0.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b"; };
    dependencies = {
      same_file = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "want";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e"; };
    dependencies = {
      try_lock = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.9.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.92";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      wasm_bindgen_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.92" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.92" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.92";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
      wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.92" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.42" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.42";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" { inherit profileName; }).out;
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.69" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.92" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.92";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      wasm_bindgen_macro_support = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.92" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.92" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.92";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
      wasm_bindgen_backend = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.92" { inherit profileName; }).out;
      wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.92" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.92" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.92";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.208.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmparser";
    version = "0.208.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd921789c9dcc495f589cb37d200155dee65b4a4beeb853323b5e24e0a5f9c58"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
      [ "validate" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" { inherit profileName; }).out;
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.5.0" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" { inherit profileName; }).out;
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.23" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.202" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmprinter."0.208.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmprinter";
    version = "0.208.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0700bdace4821e6c694617938500ae9999946df464bb13219c16570f8b6f202f"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.86" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.208.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.69" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77afa9a11836342370f4817622a2f0f418b134426d91a82dfb48f532d2ec13ef"; };
    features = builtins.concatLists [
      [ "AbortController" ]
      [ "AbortSignal" ]
      [ "Blob" ]
      [ "BlobPropertyBag" ]
      [ "Event" ]
      [ "EventTarget" ]
      [ "File" ]
      [ "FormData" ]
      [ "Headers" ]
      [ "MessageEvent" ]
      [ "ReadableStream" ]
      [ "Request" ]
      [ "RequestCredentials" ]
      [ "RequestInit" ]
      [ "RequestMode" ]
      [ "Response" ]
      [ "ServiceWorkerGlobalScope" ]
      [ "Window" ]
      [ "Worker" ]
      [ "WorkerGlobalScope" ]
    ];
    dependencies = {
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.69" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.92" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Console" ]
      [ "Win32_System_Diagnostics" ]
      [ "Win32_System_Diagnostics_Debug" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_Pipes" ]
      [ "Win32_System_Registry" ]
      [ "Win32_System_SystemServices" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_Time" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.52.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_NetworkManagement" ]
      [ "Win32_NetworkManagement_IpHelper" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Security_Authentication" ]
      [ "Win32_Security_Authentication_Identity" ]
      [ "Win32_Security_Credentials" ]
      [ "Win32_Security_Cryptography" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Console" ]
      [ "Win32_System_Diagnostics" ]
      [ "Win32_System_Diagnostics_Debug" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_Memory" ]
      [ "Win32_System_SystemInformation" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.5" { inherit profileName; }).out;
      ${ if hostPlatform.config == "i686-pc-windows-gnullvm" then "windows_i686_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.5" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.5" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "arm64ec") && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnullvm";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.52.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winnow."0.6.8" = overridableMkRustCrate (profileName: rec {
    name = "winnow";
    version = "0.6.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3c52e9c97a68071b23e836c9380edae937f17b9c4667bd021973efc689f618d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winreg."0.52.0" = overridableMkRustCrate (profileName: rec {
    name = "winreg";
    version = "0.52.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a277a57398d4bfa075df44f501a17cfdf8542d224f0d36095a2adc7aee4ef0a5"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      windows_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.34" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy";
    version = "0.7.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087"; };
    features = builtins.concatLists [
      [ "simd" ]
    ];
    dependencies = {
      ${ if false then "zerocopy_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.34" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.34" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy-derive";
    version = "0.7.34";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "15e934569e47891f7d9411f1a451d947a60e000ab3bd24fbb970f000387d1b3b"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "zeroize";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "525b4ec142c6b68a2d10f01f7bbf6755599ca3f81ea53b8431b7dd348f5fdb2d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "zeroize_derive" ]
    ];
    dependencies = {
      zeroize_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "zeroize_derive";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.82" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.36" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.61" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zip."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "zip";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2568cd0f20e86cd9a7349fe05178f7bd22f22724678448ae5a9bac266df2689"; };
    features = builtins.concatLists [
      [ "_deflate-any" ]
      [ "deflate" ]
      [ "deflate-flate2" ]
      [ "deflate-zopfli" ]
      [ "flate2" ]
      [ "zopfli" ]
    ];
    dependencies = {
      ${ if false then "arbitrary" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arbitrary."1.3.2" { inherit profileName; }).out;
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      ${ if (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.cpu.bits == 32 || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "powerpc" then "crossbeam_utils" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.20" { inherit profileName; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.30" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.2.6" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.2" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.61" { inherit profileName; }).out;
      zopfli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zopfli."0.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zopfli."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "zopfli";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5019f391bac5cf252e93bbcc53d039ffd62c7bfb7c150414d61369afe57e946"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "gzip" ]
      [ "std" ]
      [ "zlib" ]
    ];
    dependencies = {
      bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.16.0" { inherit profileName; }).out;
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" { inherit profileName; }).out;
      lockfree_object_pool = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lockfree-object-pool."0.1.6" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.21" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.19.0" { inherit profileName; }).out;
      simd_adler32 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simd-adler32."0.3.7" { inherit profileName; }).out;
    };
  });
  
}
